name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: unit-coverage
          path: coverage/

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          SKIP_BLOCKCHAIN: true

  e2e-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        origin: [localhost, '127.0.0.1']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Run E2E tests - ${{ matrix.browser }} via ${{ matrix.origin }}
        run: |
          export BASE_URL="http://${{ matrix.origin }}:3001"
          npx playwright test --project=${{ matrix.browser }}
        env:
          NODE_ENV: test
          HOST: 0.0.0.0
          SKIP_BLOCKCHAIN: true
      
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.origin }}
          path: test-results/

  cors-websocket-tests:
    runs-on: ubuntu-latest
    name: CORS and WebSocket Security Tests
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Test WebSocket CORS configurations
        run: npm run test:e2e:cors
        env:
          NODE_ENV: test
          HOST: 0.0.0.0
          
      - name: Verify CORS headers
        run: |
          # Start server in background
          HOST=0.0.0.0 npm start &
          SERVER_PID=$!
          
          # Wait for server
          sleep 10
          
          # Test CORS headers from different origins
          for origin in "http://localhost:3001" "http://127.0.0.1:3001" "http://example.com"; do
            echo "Testing CORS for origin: $origin"
            curl -s -I -X OPTIONS \
              -H "Origin: $origin" \
              -H "Access-Control-Request-Method: GET" \
              http://localhost:3001/api | grep -i "access-control"
          done
          
          # Cleanup
          kill $SERVER_PID

  console-error-tests:
    runs-on: ubuntu-latest
    name: Browser Console Error Detection
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Run console error monitoring tests
        run: npm run test:e2e:console
        env:
          NODE_ENV: test
          HOST: 0.0.0.0
          DEBUG: pw:api
      
      - name: Check for CSP violations
        run: |
          # This would have caught our CSP issues
          npm run test:e2e:console -- --grep "CSP"

  edge-case-tests:
    runs-on: ubuntu-latest
    name: Data Edge Case Tests
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Test BigInt edge cases
        run: npm run test:e2e:edge -- --grep "BigInt"
        env:
          NODE_ENV: test
      
      - name: Test numeric boundary values
        run: npm run test:e2e:edge -- --grep "extreme numeric"
        env:
          NODE_ENV: test

  smoke-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: [localhost, '0.0.0.0', '127.0.0.1']
    
    name: Smoke Test - HOST=${{ matrix.host }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Run smoke tests with HOST=${{ matrix.host }}
        run: npm run test:e2e:smoke
        env:
          NODE_ENV: test
          HOST: ${{ matrix.host }}
          TEST_HOST: ${{ matrix.host }}

  pre-deployment-check:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    name: Pre-deployment Validation
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Run pre-deployment checks
        run: npm run precheck
        env:
          NODE_ENV: test
      
      - name: Generate deployment readiness report
        if: always()
        run: |
          echo "## Deployment Readiness Report" > deployment-report.md
          echo "- Lint: ${{ job.status }}" >> deployment-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> deployment-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> deployment-report.md
          echo "- Pre-deployment Checks: ${{ job.status }}" >> deployment-report.md
      
      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deployment-readiness-report
          path: deployment-report.md

  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --production
      
      - name: Check for known vulnerabilities
        run: |
          # Would have caught dependency issues
          npm list --depth=0 | grep -E "(WARN|ERR)" || true