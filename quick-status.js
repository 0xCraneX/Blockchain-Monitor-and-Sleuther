#!/usr/bin/env node

/**
 * Quick Status Check for Polkadot Analysis Tool
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç POLKADOT ANALYSIS TOOL - STATUS CHECK');
console.log('='.repeat(50));

// Check project structure
console.log('\nüìÅ PROJECT STRUCTURE:');
const checkPaths = [
  'src/index.js',
  'src/api/index.js', 
  'src/services/DatabaseService.js',
  'src/services/GraphQueries.js',
  'public/index.html',
  'data/analysis.db',
  'package.json',
  'vitest.config.js'
];

checkPaths.forEach(checkPath => {
  const fullPath = path.join(__dirname, checkPath);
  const exists = fs.existsSync(fullPath);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${checkPath}`);
});

// Check dependencies
console.log('\nüì¶ DEPENDENCIES:');
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'));
  
  console.log(`‚úÖ Express.js: ${packageJson.dependencies.express}`);
  console.log(`‚úÖ SQLite: ${packageJson.dependencies['better-sqlite3']}`);
  console.log(`‚úÖ Polkadot API: ${packageJson.dependencies['@polkadot/api']}`);
  console.log(`‚úÖ D3.js: ${packageJson.dependencies.d3}`);
  console.log(`‚úÖ Socket.io: ${packageJson.dependencies['socket.io']}`);
  console.log(`‚úÖ Vitest: ${packageJson.devDependencies.vitest}`);
} catch (error) {
  console.log(`‚ùå Error reading package.json: ${error.message}`);
}

// Check test files
console.log('\nüß™ TEST FILES:');
const testDirs = ['tests/unit', 'tests/integration', 'tests/performance'];
testDirs.forEach(testDir => {
  const fullPath = path.join(__dirname, testDir);
  if (fs.existsSync(fullPath)) {
    const files = fs.readdirSync(fullPath);
    console.log(`‚úÖ ${testDir}: ${files.length} files`);
  } else {
    console.log(`‚ùå ${testDir}: Not found`);
  }
});

// Check source files
console.log('\nüíª SOURCE CODE:');
const srcDirs = ['src/api/routes', 'src/services', 'src/controllers'];
srcDirs.forEach(srcDir => {
  const fullPath = path.join(__dirname, srcDir);
  if (fs.existsSync(fullPath)) {
    const files = fs.readdirSync(fullPath);
    console.log(`‚úÖ ${srcDir}: ${files.length} files`);
  } else {
    console.log(`‚ùå ${srcDir}: Not found`);
  }
});

console.log('\nüéØ SUMMARY:');
console.log('This is a comprehensive blockchain analysis tool with:');
console.log('‚Ä¢ Express.js backend with REST API');
console.log('‚Ä¢ SQLite database for graph storage');
console.log('‚Ä¢ D3.js frontend for visualization');
console.log('‚Ä¢ Comprehensive test suite');
console.log('‚Ä¢ Multi-hop graph analysis capabilities');
console.log('‚Ä¢ Real-time WebSocket support');

console.log('\nüöÄ READY TO TEST:');
console.log('Run these commands to test the application:');
console.log('‚Ä¢ npm test (run test suite)');
console.log('‚Ä¢ npm run dev (start development server)');
console.log('‚Ä¢ npm run build (build for production)');